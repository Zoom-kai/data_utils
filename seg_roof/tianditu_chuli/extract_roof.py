import matplotlib.pyplot as plt
import numpy as np
import cv2
from tqdm import tqdm
from matplotlib import cm
import pickle as pkl
import torch
import os

class extract_roof:
    def __init__(self,
                 building_color=
                 [[248, 249, 250], [248, 249, 251], [248, 249, 252], [248, 249, 248], [248, 249, 249], [248, 249, 250],
                  [248, 249, 251], [248, 249, 252], [248, 249, 248], [248, 249, 249], [248, 249, 250], [248, 249, 251],
                  [248, 249, 252], [248, 250, 251], [248, 250, 252], [248, 250, 248], [248, 250, 249], [248, 250, 250],
                  [248, 250, 251], [248, 250, 252], [248, 250, 248], [248, 250, 249], [248, 250, 250], [248, 250, 251],
                  [248, 250, 252], [248, 251, 252], [248, 251, 248], [248, 251, 249], [248, 251, 250], [248, 251, 251],
                  [248, 251, 252], [248, 251, 248], [248, 251, 249], [248, 251, 250], [248, 251, 251], [248, 251, 252],
                  [248, 252, 248], [248, 252, 249], [248, 252, 250], [248, 252, 251], [248, 252, 252], [248, 252, 248],
                  [248, 252, 249], [248, 252, 250], [248, 252, 251], [248, 252, 252], [248, 248, 249], [248, 248, 250],
                  [248, 248, 251], [248, 248, 252], [248, 248, 248], [248, 248, 249], [248, 248, 250], [248, 248, 251],
                  [248, 248, 252], [248, 249, 250], [248, 249, 251], [248, 249, 252], [248, 249, 248], [248, 249, 249],
                  [248, 249, 250], [248, 249, 251], [248, 249, 252], [248, 250, 251], [248, 250, 252], [248, 250, 248],
                  [248, 250, 249], [248, 250, 250], [248, 250, 251], [248, 250, 252], [248, 251, 252], [248, 251, 248],
                  [248, 251, 249], [248, 251, 250], [248, 251, 251], [248, 251, 252], [248, 252, 248], [248, 252, 249],
                  [248, 252, 250], [248, 252, 251], [248, 252, 252], [248, 248, 249], [248, 248, 250], [248, 248, 251],
                  [248, 248, 252], [248, 249, 250], [248, 249, 251], [248, 249, 252], [248, 250, 251], [248, 250, 252],
                  [248, 251, 252], [249, 250, 251], [249, 250, 252], [249, 250, 248], [249, 250, 249], [249, 250, 250],
                  [249, 250, 251], [249, 250, 252], [249, 250, 248], [249, 250, 249], [249, 250, 250], [249, 250, 251],
                  [249, 250, 252], [249, 251, 252], [249, 251, 248], [249, 251, 249], [249, 251, 250], [249, 251, 251],
                  [249, 251, 252], [249, 251, 248], [249, 251, 249], [249, 251, 250], [249, 251, 251], [249, 251, 252],
                  [249, 252, 248], [249, 252, 249], [249, 252, 250], [249, 252, 251], [249, 252, 252], [249, 252, 248],
                  [249, 252, 249], [249, 252, 250], [249, 252, 251], [249, 252, 252], [249, 248, 249], [249, 248, 250],
                  [249, 248, 251], [249, 248, 252], [249, 248, 248], [249, 248, 249], [249, 248, 250], [249, 248, 251],
                  [249, 248, 252], [249, 249, 250], [249, 249, 251], [249, 249, 252], [249, 249, 248], [249, 249, 249],
                  [249, 249, 250], [249, 249, 251], [249, 249, 252], [249, 250, 251], [249, 250, 252], [249, 250, 248],
                  [249, 250, 249], [249, 250, 250], [249, 250, 251], [249, 250, 252], [249, 251, 252], [249, 251, 248],
                  [249, 251, 249], [249, 251, 250], [249, 251, 251], [249, 251, 252], [249, 252, 248], [249, 252, 249],
                  [249, 252, 250], [249, 252, 251], [249, 252, 252], [249, 248, 249], [249, 248, 250], [249, 248, 251],
                  [249, 248, 252], [249, 249, 250], [249, 249, 251], [249, 249, 252], [249, 250, 251], [249, 250, 252],
                  [249, 251, 252], [250, 251, 252], [250, 251, 248], [250, 251, 249], [250, 251, 250], [250, 251, 251],
                  [250, 251, 252], [250, 251, 248], [250, 251, 249], [250, 251, 250], [250, 251, 251], [250, 251, 252],
                  [250, 252, 248], [250, 252, 249], [250, 252, 250], [250, 252, 251], [250, 252, 252], [250, 252, 248],
                  [250, 252, 249], [250, 252, 250], [250, 252, 251], [250, 252, 252], [250, 248, 249], [250, 248, 250],
                  [250, 248, 251], [250, 248, 252], [250, 248, 248], [250, 248, 249], [250, 248, 250], [250, 248, 251],
                  [250, 248, 252], [250, 249, 250], [250, 249, 251], [250, 249, 252], [250, 249, 248], [250, 249, 249],
                  [250, 249, 250], [250, 249, 251], [250, 249, 252], [250, 250, 251], [250, 250, 252], [250, 250, 248],
                  [250, 250, 249], [250, 250, 250], [250, 250, 251], [250, 250, 252], [250, 251, 252], [250, 251, 248],
                  [250, 251, 249], [250, 251, 250], [250, 251, 251], [250, 251, 252], [250, 252, 248], [250, 252, 249],
                  [250, 252, 250], [250, 252, 251], [250, 252, 252], [250, 248, 249], [250, 248, 250], [250, 248, 251],
                  [250, 248, 252], [250, 249, 250], [250, 249, 251], [250, 249, 252], [250, 250, 251], [250, 250, 252],
                  [250, 251, 252], [251, 252, 248], [251, 252, 249], [251, 252, 250], [251, 252, 251], [251, 252, 252],
                  [251, 252, 248], [251, 252, 249], [251, 252, 250], [251, 252, 251], [251, 252, 252], [251, 248, 249],
                  [251, 248, 250], [251, 248, 251], [251, 248, 252], [251, 248, 248], [251, 248, 249], [251, 248, 250],
                  [251, 248, 251], [251, 248, 252], [251, 249, 250], [251, 249, 251], [251, 249, 252], [251, 249, 248],
                  [251, 249, 249], [251, 249, 250], [251, 249, 251], [251, 249, 252], [251, 250, 251], [251, 250, 252],
                  [251, 250, 248], [251, 250, 249], [251, 250, 250], [251, 250, 251], [251, 250, 252], [251, 251, 252],
                  [251, 251, 248], [251, 251, 249], [251, 251, 250], [251, 251, 251], [251, 251, 252], [251, 252, 248],
                  [251, 252, 249], [251, 252, 250], [251, 252, 251], [251, 252, 252], [251, 248, 249], [251, 248, 250],
                  [251, 248, 251], [251, 248, 252], [251, 249, 250], [251, 249, 251], [251, 249, 252], [251, 250, 251],
                  [251, 250, 252], [251, 251, 252], [252, 248, 249], [252, 248, 250], [252, 248, 251], [252, 248, 252],
                  [252, 248, 248], [252, 248, 249], [252, 248, 250], [252, 248, 251], [252, 248, 252], [252, 249, 250],
                  [252, 249, 251], [252, 249, 252], [252, 249, 248], [252, 249, 249], [252, 249, 250], [252, 249, 251],
                  [252, 249, 252], [252, 250, 251], [252, 250, 252], [252, 250, 248], [252, 250, 249], [252, 250, 250],
                  [252, 250, 251], [252, 250, 252], [252, 251, 252], [252, 251, 248], [252, 251, 249], [252, 251, 250],
                  [252, 251, 251], [252, 251, 252], [252, 252, 248], [252, 252, 249], [252, 252, 250], [252, 252, 251],
                  [252, 252, 252], [252, 248, 249], [252, 248, 250], [252, 248, 251], [252, 248, 252], [252, 249, 250],
                  [252, 249, 251], [252, 249, 252], [252, 250, 251], [252, 250, 252], [252, 251, 252], [248, 249, 250],
                  [248, 249, 251], [248, 249, 252], [248, 249, 248], [248, 249, 249], [248, 249, 250], [248, 249, 251],
                  [248, 249, 252], [248, 250, 251], [248, 250, 252], [248, 250, 248], [248, 250, 249], [248, 250, 250],
                  [248, 250, 251], [248, 250, 252], [248, 251, 252], [248, 251, 248], [248, 251, 249], [248, 251, 250],
                  [248, 251, 251], [248, 251, 252], [248, 252, 248], [248, 252, 249], [248, 252, 250], [248, 252, 251],
                  [248, 252, 252], [248, 248, 249], [248, 248, 250], [248, 248, 251], [248, 248, 252], [248, 249, 250],
                  [248, 249, 251], [248, 249, 252], [248, 250, 251], [248, 250, 252], [248, 251, 252], [249, 250, 251],
                  [249, 250, 252], [249, 250, 248], [249, 250, 249], [249, 250, 250], [249, 250, 251], [249, 250, 252],
                  [249, 251, 252], [249, 251, 248], [249, 251, 249], [249, 251, 250], [249, 251, 251], [249, 251, 252],
                  [249, 252, 248], [249, 252, 249], [249, 252, 250], [249, 252, 251], [249, 252, 252], [249, 248, 249],
                  [249, 248, 250], [249, 248, 251], [249, 248, 252], [249, 249, 250], [249, 249, 251], [249, 249, 252],
                  [249, 250, 251], [249, 250, 252], [249, 251, 252], [250, 251, 252], [250, 251, 248], [250, 251, 249],
                  [250, 251, 250], [250, 251, 251], [250, 251, 252], [250, 252, 248], [250, 252, 249], [250, 252, 250],
                  [250, 252, 251], [250, 252, 252], [250, 248, 249], [250, 248, 250], [250, 248, 251], [250, 248, 252],
                  [250, 249, 250], [250, 249, 251], [250, 249, 252], [250, 250, 251], [250, 250, 252], [250, 251, 252],
                  [251, 252, 248], [251, 252, 249], [251, 252, 250], [251, 252, 251], [251, 252, 252], [251, 248, 249],
                  [251, 248, 250], [251, 248, 251], [251, 248, 252], [251, 249, 250], [251, 249, 251], [251, 249, 252],
                  [251, 250, 251], [251, 250, 252], [251, 251, 252], [252, 248, 249], [252, 248, 250], [252, 248, 251],
                  [252, 248, 252], [252, 249, 250], [252, 249, 251], [252, 249, 252], [252, 250, 251], [252, 250, 252],
                  [252, 251, 252], [248, 249, 250], [248, 249, 251], [248, 249, 252], [248, 250, 251], [248, 250, 252],
                  [248, 251, 252], [249, 250, 251], [249, 250, 252], [249, 251, 252], [250, 251, 252], [230, 230, 230],
                  [231, 231, 231], [231, 231, 232], [231, 231, 233], [231, 231, 234], [231, 231, 235], [231, 231, 236], [231, 232, 231], [231, 232, 232], [231, 232, 233], [231, 232, 234], [231, 232, 235], [231, 232, 236], [231, 233, 231], [231, 233, 232], [231, 233, 233], [231, 233, 234], [231, 233, 235], [231, 233, 236], [231, 234, 231], [231, 234, 232], [231, 234, 233], [231, 234, 234], [231, 234, 235], [231, 234, 236], [231, 235, 231], [231, 235, 232], [231, 235, 233], [231, 235, 234], [231, 235, 235], [231, 235, 236], [231, 236, 231], [231, 236, 232], [231, 236, 233], [231, 236, 234], [231, 236, 235], [231, 236, 236], [232, 231, 231], [232, 231, 232], [232, 231, 233], [232, 231, 234], [232, 231, 235], [232, 231, 236], [232, 232, 231], [232, 232, 232], [232, 232, 233], [232, 232, 234], [232, 232, 235], [232, 232, 236], [232, 233, 231], [232, 233, 232], [232, 233, 233], [232, 233, 234], [232, 233, 235], [232, 233, 236], [232, 234, 231], [232, 234, 232], [232, 234, 233], [232, 234, 234], [232, 234, 235], [232, 234, 236], [232, 235, 231], [232, 235, 232], [232, 235, 233], [232, 235, 234], [232, 235, 235], [232, 235, 236], [232, 236, 231], [232, 236, 232], [232, 236, 233], [232, 236, 234], [232, 236, 235], [232, 236, 236], [233, 231, 231], [233, 231, 232], [233, 231, 233], [233, 231, 234], [233, 231, 235], [233, 231, 236], [233, 232, 231], [233, 232, 232], [233, 232, 233], [233, 232, 234], [233, 232, 235], [233, 232, 236], [233, 233, 231], [233, 233, 232], [233, 233, 233], [233, 233, 234], [233, 233, 235], [233, 233, 236], [233, 234, 231], [233, 234, 232], [233, 234, 233], [233, 234, 234], [233, 234, 235], [233, 234, 236], [233, 235, 231], [233, 235, 232], [233, 235, 233], [233, 235, 234], [233, 235, 235], [233, 235, 236], [233, 236, 231], [233, 236, 232], [233, 236, 233], [233, 236, 234], [233, 236, 235], [233, 236, 236], [234, 231, 231], [234, 231, 232], [234, 231, 233], [234, 231, 234], [234, 231, 235], [234, 231, 236], [234, 232, 231], [234, 232, 232], [234, 232, 233], [234, 232, 234], [234, 232, 235], [234, 232, 236], [234, 233, 231], [234, 233, 232], [234, 233, 233], [234, 233, 234], [234, 233, 235], [234, 233, 236], [234, 234, 231], [234, 234, 232], [234, 234, 233], [234, 234, 234], [234, 234, 235], [234, 234, 236], [234, 235, 231], [234, 235, 232], [234, 235, 233], [234, 235, 234], [234, 235, 235], [234, 235, 236], [234, 236, 231], [234, 236, 232], [234, 236, 233], [234, 236, 234], [234, 236, 235], [234, 236, 236], [235, 231, 231], [235, 231, 232], [235, 231, 233], [235, 231, 234], [235, 231, 235], [235, 231, 236], [235, 232, 231], [235, 232, 232], [235, 232, 233], [235, 232, 234], [235, 232, 235], [235, 232, 236], [235, 233, 231], [235, 233, 232], [235, 233, 233], [235, 233, 234], [235, 233, 235], [235, 233, 236], [235, 234, 231], [235, 234, 232], [235, 234, 233], [235, 234, 234], [235, 234, 235], [235, 234, 236], [235, 235, 231], [235, 235, 232], [235, 235, 233], [235, 235, 234], [235, 235, 235], [235, 235, 236], [235, 236, 231], [235, 236, 232], [235, 236, 233], [235, 236, 234], [235, 236, 235], [235, 236, 236], [236, 231, 231], [236, 231, 232], [236, 231, 233], [236, 231, 234], [236, 231, 235], [236, 231, 236], [236, 232, 231], [236, 232, 232], [236, 232, 233], [236, 232, 234], [236, 232, 235], [236, 232, 236], [236, 233, 231], [236, 233, 232], [236, 233, 233], [236, 233, 234], [236, 233, 235], [236, 233, 236], [236, 234, 231], [236, 234, 232], [236, 234, 233], [236, 234, 234], [236, 234, 235], [236, 234, 236], [236, 235, 231], [236, 235, 232], [236, 235, 233], [236, 235, 234], [236, 235, 235], [236, 235, 236], [236, 236, 231], [236, 236, 232], [236, 236, 233], [236, 236, 234], [236, 236, 235], [236, 236, 236]],

                 resolution = 0.59,
                 area_thresh = 1500,
                 height_thresh = 40,
                 width_thresh = 40,
                 use_cuda = True,
                 gpu_id = '1'
                 ):

        self.building_color = building_color
        self.resolution = resolution
        self.area_thresh = area_thresh
        self.height_thresh = height_thresh
        self.width_thresh = width_thresh
        self.use_cuda = use_cuda
        self.gpu_id = gpu_id

    def extract_roof_from_street_map(self, street_map_path, street_map_dir_save_path, label = 1):
        street_map = plt.imread(street_map_path)[:,:-1]

        if street_map.max()<=1:
            street_map = (street_map*255).astype(np.uint8)
        img_zeros = np.zeros_like(street_map)
        for color in self.building_color:
            R, G, B = color
            img_zeros[(street_map[:, :, 0] == R) & (street_map[:, :, 1] == G) & (street_map[:, :, 2] == B)] = label

        gray = cv2.cvtColor(img_zeros, cv2.COLOR_BGR2GRAY)
        # ret, binary = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)
        kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (5, 5))  # 定义结构元素的形状和大小
        # gray = cv2.morphologyEx(gray, op=cv2.MORPH_CLOSE, kernel=kernel, iterations=1)
        gray = cv2.morphologyEx(gray, op=cv2.MORPH_OPEN, kernel=kernel, iterations=1)
        # dst = cv2.morphologyEx(dst, op=cv2.MORPH_OPEN, kernel=kernel, iterations=1)
        # gray = cv2.erode(gray, kernel)
        # dst = cv2.erode(dst, kernel)
        # dst = cv2.dilate(gray, kernel)
        # dst = cv2.dilate(dst, kernel)

        # plt.imshow(gray)
        # plt.show()
        # exit()
        if not os.path.isdir(street_map_dir_save_path):
            os.mkdir(street_map_dir_save_path)
        cv2.imwrite("{}/{}".format(street_map_dir_save_path, street_map_path.split("/")[-1]), gray)
        print(1111111111)
    def crop_roof_from_satellite_image(self, satellite_map_path, locations, save_path):
        if not os.path.isdir(save_path):
            os.mkdir(save_path)
        print(3333333333333333333)
        satellite_map = plt.imread(satellite_map_path)[:,:,:-1]
        i = 0
        basename = os.path.basename(satellite_map_path)[:-4]
        print(locations)
        for location_i in locations:
            roof = satellite_map[location_i[0]:location_i[1],location_i[2]:location_i[3]]
            roof[location_i[4]==False] = 0.0
            print(111111111111111111111)
            plt.imsave(os.path.join(save_path, basename+'_{}.png'.format(i)), roof)
            i += 1



if __name__ == "__main__":
    from tqdm import tqdm
    street_map_dir_path = "/mnt/data1/zc_data/map_data/china_90_city_datasets/simplified_Version_1/Tier3/Suzhou/suzhou_hengtang_shishan_tianditu"
    street_map_dir_save_path = "/mnt/data1/zc_data/map_data/china_90_city_datasets/simplified_Version_1/Tier3/Suzhou/suzhou_hengtang_shishan_tianditu_mask"

    street_map_dir = os.listdir(street_map_dir_path)
    for name in tqdm(street_map_dir):
        # if name != "fengqiao_buchong.png":
        #     continue
        print(name)
        street_map_path = r"{}/{}".format(street_map_dir_path, name)
        # satellite_map_path = r"guangde_map1.png"

        extractor = extract_roof()
        locations = extractor.extract_roof_from_street_map(street_map_path,street_map_dir_save_path, 255)
    # extractor.crop_roof_from_satellite_image(satellite_map_path, locations, save_path)
