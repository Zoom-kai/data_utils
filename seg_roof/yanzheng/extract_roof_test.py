import matplotlib.pyplot as plt
import numpy as np
import cv2
from tqdm import tqdm
from matplotlib import cm
import pickle as pkl
import torch
import os

class extract_roof:
    def __init__(self,
                 building_color =

                 [[248, 249, 250], [248, 249, 251], [248, 249, 252], [248, 249, 248], [248, 249, 249], [248, 249, 250],
                  [248, 249, 251], [248, 249, 252], [248, 249, 248], [248, 249, 249], [248, 249, 250], [248, 249, 251],
                  [248, 249, 252], [248, 250, 251], [248, 250, 252], [248, 250, 248], [248, 250, 249], [248, 250, 250],
                  [248, 250, 251], [248, 250, 252], [248, 250, 248], [248, 250, 249], [248, 250, 250], [248, 250, 251],
                  [248, 250, 252], [248, 251, 252], [248, 251, 248], [248, 251, 249], [248, 251, 250], [248, 251, 251],
                  [248, 251, 252], [248, 251, 248], [248, 251, 249], [248, 251, 250], [248, 251, 251], [248, 251, 252],
                  [248, 252, 248], [248, 252, 249], [248, 252, 250], [248, 252, 251], [248, 252, 252], [248, 252, 248],
                  [248, 252, 249], [248, 252, 250], [248, 252, 251], [248, 252, 252], [248, 248, 249], [248, 248, 250],
                  [248, 248, 251], [248, 248, 252], [248, 248, 248], [248, 248, 249], [248, 248, 250], [248, 248, 251],
                  [248, 248, 252], [248, 249, 250], [248, 249, 251], [248, 249, 252], [248, 249, 248], [248, 249, 249],
                  [248, 249, 250], [248, 249, 251], [248, 249, 252], [248, 250, 251], [248, 250, 252], [248, 250, 248],
                  [248, 250, 249], [248, 250, 250], [248, 250, 251], [248, 250, 252], [248, 251, 252], [248, 251, 248],
                  [248, 251, 249], [248, 251, 250], [248, 251, 251], [248, 251, 252], [248, 252, 248], [248, 252, 249],
                  [248, 252, 250], [248, 252, 251], [248, 252, 252], [248, 248, 249], [248, 248, 250], [248, 248, 251],
                  [248, 248, 252], [248, 249, 250], [248, 249, 251], [248, 249, 252], [248, 250, 251], [248, 250, 252],
                  [248, 251, 252], [249, 250, 251], [249, 250, 252], [249, 250, 248], [249, 250, 249], [249, 250, 250],
                  [249, 250, 251], [249, 250, 252], [249, 250, 248], [249, 250, 249], [249, 250, 250], [249, 250, 251],
                  [249, 250, 252], [249, 251, 252], [249, 251, 248], [249, 251, 249], [249, 251, 250], [249, 251, 251],
                  [249, 251, 252], [249, 251, 248], [249, 251, 249], [249, 251, 250], [249, 251, 251], [249, 251, 252],
                  [249, 252, 248], [249, 252, 249], [249, 252, 250], [249, 252, 251], [249, 252, 252], [249, 252, 248],
                  [249, 252, 249], [249, 252, 250], [249, 252, 251], [249, 252, 252], [249, 248, 249], [249, 248, 250],
                  [249, 248, 251], [249, 248, 252], [249, 248, 248], [249, 248, 249], [249, 248, 250], [249, 248, 251],
                  [249, 248, 252], [249, 249, 250], [249, 249, 251], [249, 249, 252], [249, 249, 248], [249, 249, 249],
                  [249, 249, 250], [249, 249, 251], [249, 249, 252], [249, 250, 251], [249, 250, 252], [249, 250, 248],
                  [249, 250, 249], [249, 250, 250], [249, 250, 251], [249, 250, 252], [249, 251, 252], [249, 251, 248],
                  [249, 251, 249], [249, 251, 250], [249, 251, 251], [249, 251, 252], [249, 252, 248], [249, 252, 249],
                  [249, 252, 250], [249, 252, 251], [249, 252, 252], [249, 248, 249], [249, 248, 250], [249, 248, 251],
                  [249, 248, 252], [249, 249, 250], [249, 249, 251], [249, 249, 252], [249, 250, 251], [249, 250, 252],
                  [249, 251, 252], [250, 251, 252], [250, 251, 248], [250, 251, 249], [250, 251, 250], [250, 251, 251],
                  [250, 251, 252], [250, 251, 248], [250, 251, 249], [250, 251, 250], [250, 251, 251], [250, 251, 252],
                  [250, 252, 248], [250, 252, 249], [250, 252, 250], [250, 252, 251], [250, 252, 252], [250, 252, 248],
                  [250, 252, 249], [250, 252, 250], [250, 252, 251], [250, 252, 252], [250, 248, 249], [250, 248, 250],
                  [250, 248, 251], [250, 248, 252], [250, 248, 248], [250, 248, 249], [250, 248, 250], [250, 248, 251],
                  [250, 248, 252], [250, 249, 250], [250, 249, 251], [250, 249, 252], [250, 249, 248], [250, 249, 249],
                  [250, 249, 250], [250, 249, 251], [250, 249, 252], [250, 250, 251], [250, 250, 252], [250, 250, 248],
                  [250, 250, 249], [250, 250, 250], [250, 250, 251], [250, 250, 252], [250, 251, 252], [250, 251, 248],
                  [250, 251, 249], [250, 251, 250], [250, 251, 251], [250, 251, 252], [250, 252, 248], [250, 252, 249],
                  [250, 252, 250], [250, 252, 251], [250, 252, 252], [250, 248, 249], [250, 248, 250], [250, 248, 251],
                  [250, 248, 252], [250, 249, 250], [250, 249, 251], [250, 249, 252], [250, 250, 251], [250, 250, 252],
                  [250, 251, 252], [251, 252, 248], [251, 252, 249], [251, 252, 250], [251, 252, 251], [251, 252, 252],
                  [251, 252, 248], [251, 252, 249], [251, 252, 250], [251, 252, 251], [251, 252, 252], [251, 248, 249],
                  [251, 248, 250], [251, 248, 251], [251, 248, 252], [251, 248, 248], [251, 248, 249], [251, 248, 250],
                  [251, 248, 251], [251, 248, 252], [251, 249, 250], [251, 249, 251], [251, 249, 252], [251, 249, 248],
                  [251, 249, 249], [251, 249, 250], [251, 249, 251], [251, 249, 252], [251, 250, 251], [251, 250, 252],
                  [251, 250, 248], [251, 250, 249], [251, 250, 250], [251, 250, 251], [251, 250, 252], [251, 251, 252],
                  [251, 251, 248], [251, 251, 249], [251, 251, 250], [251, 251, 251], [251, 251, 252], [251, 252, 248],
                  [251, 252, 249], [251, 252, 250], [251, 252, 251], [251, 252, 252], [251, 248, 249], [251, 248, 250],
                  [251, 248, 251], [251, 248, 252], [251, 249, 250], [251, 249, 251], [251, 249, 252], [251, 250, 251],
                  [251, 250, 252], [251, 251, 252], [252, 248, 249], [252, 248, 250], [252, 248, 251], [252, 248, 252],
                  [252, 248, 248], [252, 248, 249], [252, 248, 250], [252, 248, 251], [252, 248, 252], [252, 249, 250],
                  [252, 249, 251], [252, 249, 252], [252, 249, 248], [252, 249, 249], [252, 249, 250], [252, 249, 251],
                  [252, 249, 252], [252, 250, 251], [252, 250, 252], [252, 250, 248], [252, 250, 249], [252, 250, 250],
                  [252, 250, 251], [252, 250, 252], [252, 251, 252], [252, 251, 248], [252, 251, 249], [252, 251, 250],
                  [252, 251, 251], [252, 251, 252], [252, 252, 248], [252, 252, 249], [252, 252, 250], [252, 252, 251],
                  [252, 252, 252], [252, 248, 249], [252, 248, 250], [252, 248, 251], [252, 248, 252], [252, 249, 250],
                  [252, 249, 251], [252, 249, 252], [252, 250, 251], [252, 250, 252], [252, 251, 252], [248, 249, 250],
                  [248, 249, 251], [248, 249, 252], [248, 249, 248], [248, 249, 249], [248, 249, 250], [248, 249, 251],
                  [248, 249, 252], [248, 250, 251], [248, 250, 252], [248, 250, 248], [248, 250, 249], [248, 250, 250],
                  [248, 250, 251], [248, 250, 252], [248, 251, 252], [248, 251, 248], [248, 251, 249], [248, 251, 250],
                  [248, 251, 251], [248, 251, 252], [248, 252, 248], [248, 252, 249], [248, 252, 250], [248, 252, 251],
                  [248, 252, 252], [248, 248, 249], [248, 248, 250], [248, 248, 251], [248, 248, 252], [248, 249, 250],
                  [248, 249, 251], [248, 249, 252], [248, 250, 251], [248, 250, 252], [248, 251, 252], [249, 250, 251],
                  [249, 250, 252], [249, 250, 248], [249, 250, 249], [249, 250, 250], [249, 250, 251], [249, 250, 252],
                  [249, 251, 252], [249, 251, 248], [249, 251, 249], [249, 251, 250], [249, 251, 251], [249, 251, 252],
                  [249, 252, 248], [249, 252, 249], [249, 252, 250], [249, 252, 251], [249, 252, 252], [249, 248, 249],
                  [249, 248, 250], [249, 248, 251], [249, 248, 252], [249, 249, 250], [249, 249, 251], [249, 249, 252],
                  [249, 250, 251], [249, 250, 252], [249, 251, 252], [250, 251, 252], [250, 251, 248], [250, 251, 249],
                  [250, 251, 250], [250, 251, 251], [250, 251, 252], [250, 252, 248], [250, 252, 249], [250, 252, 250],
                  [250, 252, 251], [250, 252, 252], [250, 248, 249], [250, 248, 250], [250, 248, 251], [250, 248, 252],
                  [250, 249, 250], [250, 249, 251], [250, 249, 252], [250, 250, 251], [250, 250, 252], [250, 251, 252],
                  [251, 252, 248], [251, 252, 249], [251, 252, 250], [251, 252, 251], [251, 252, 252], [251, 248, 249],
                  [251, 248, 250], [251, 248, 251], [251, 248, 252], [251, 249, 250], [251, 249, 251], [251, 249, 252],
                  [251, 250, 251], [251, 250, 252], [251, 251, 252], [252, 248, 249], [252, 248, 250], [252, 248, 251],
                  [252, 248, 252], [252, 249, 250], [252, 249, 251], [252, 249, 252], [252, 250, 251], [252, 250, 252],
                  [252, 251, 252], [248, 249, 250], [248, 249, 251], [248, 249, 252], [248, 250, 251], [248, 250, 252],
                  [248, 251, 252], [249, 250, 251], [249, 250, 252], [249, 251, 252], [250, 251, 252]],

                 resolution = 0.59,
                 area_thresh = 1500,
                 height_thresh = 40,
                 width_thresh = 40,
                 use_cuda = True,
                 gpu_id = '1'
                 ):

        self.building_color = building_color
        self.resolution = resolution
        self.area_thresh = area_thresh
        self.height_thresh = height_thresh
        self.width_thresh = width_thresh
        self.use_cuda = use_cuda
        self.gpu_id = gpu_id

    def extract_roof_from_street_map(self, street_map_path, street_map_dir_save_path):
        street_map = plt.imread(street_map_path)[:,:-1]

        if street_map.max() <= 1:
            street_map = (street_map*255).astype(np.uint8)
        img_zeros = np.zeros_like(street_map)
        corlor_list = [247, 248, 249, 250, 251]
        print(street_map[:, :, 0] == corlor_list)

        exit()
        img_zeros[(street_map[:, :, 0] == corlor_list) & (street_map[:, :, 1] == G) & (street_map[:, :, 2] == B)] = 1


        for color in self.building_color:
            R, G, B = color
            img_zeros[(street_map[:, :, 0] == R) & (street_map[:, :, 1] == G) & (street_map[:, :, 2] == B)] = 1

        gray = cv2.cvtColor(img_zeros, cv2.COLOR_BGR2GRAY)
        # ret, binary = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)
        kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))  # 定义结构元素的形状和大小
        # gray = cv2.morphologyEx(gray, op=cv2.MORPH_CLOSE, kernel=kernel, iterations=1)
        # dst = cv2.morphologyEx(gray, op=cv2.MORPH_OPEN, kernel=kernel, iterations=1)
        # dst = cv2.morphologyEx(dst, op=cv2.MORPH_OPEN, kernel=kernel, iterations=1)
        # dst = cv2.erode(binary, kernel)
        # dst = cv2.erode(dst, kernel)
        # dst = cv2.dilate(gray, kernel)
        # dst = cv2.dilate(dst, kernel)

        plt.imshow(gray)
        plt.show()
        exit()
        if not os.path.isdir(street_map_dir_save_path):
            os.mkdir(street_map_dir_save_path)
        cv2.imwrite("{}/{}".format(street_map_dir_save_path, street_map_path.split("/")[-1]), gray)

    def crop_roof_from_satellite_image(self, satellite_map_path, locations, save_path):
        if not os.path.isdir(save_path):
            os.mkdir(save_path)
        print(3333333333333333333)
        satellite_map = plt.imread(satellite_map_path)[:,:,:-1]
        i = 0
        basename = os.path.basename(satellite_map_path)[:-4]
        print(locations)
        for location_i in locations:
            roof = satellite_map[location_i[0]:location_i[1],location_i[2]:location_i[3]]
            roof[location_i[4]==False] = 0.0
            print(111111111111111111111)
            plt.imsave(os.path.join(save_path, basename+'_{}.png'.format(i)), roof)
            i += 1



if __name__ == "__main__":
    from tqdm import tqdm
    street_map_dir_path = "tianditu"
    street_map_dir_save_path = "mask"

    street_map_dir = os.listdir(street_map_dir_path)
    for name in tqdm(street_map_dir):
        print(name)
        street_map_path = r"{}/{}".format(street_map_dir_path, name)
        # satellite_map_path = r"guangde_map1.png"

        extractor = extract_roof()
        locations = extractor.extract_roof_from_street_map(street_map_path,street_map_dir_save_path)
    # extractor.crop_roof_from_satellite_image(satellite_map_path, locations, save_path)


